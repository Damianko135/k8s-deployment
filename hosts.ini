# Combined Kubernetes and K3s cluster inventory
# Supports both Ubuntu/Debian and RHEL/CentOS systems
# Replace the IP addresses below with your actual server IPs

# ================================
# KUBERNETES (K8s) CLUSTER
# ================================
[k8s_masters]
# Kubernetes master node(s)
# Example for Ubuntu/Debian
k8s-master1 ansible_host=192.168.1.10 ansible_user=ubuntu
# Example for RHEL/CentOS
# k8s-master1 ansible_host=192.168.1.10 ansible_user=ec2-user

[k8s_workers]
# Kubernetes worker nodes
# Example for Ubuntu/Debian
k8s-worker1 ansible_host=192.168.1.11 ansible_user=ubuntu
k8s-worker2 ansible_host=192.168.1.12 ansible_user=ubuntu
k8s-worker3 ansible_host=192.168.1.13 ansible_user=ubuntu
# Example for RHEL/CentOS
# k8s-worker1 ansible_host=192.168.1.11 ansible_user=ec2-user
# k8s-worker2 ansible_host=192.168.1.12 ansible_user=ec2-user
# k8s-worker3 ansible_host=192.168.1.13 ansible_user=ec2-user

# K8s cluster grouping
[k8s_cluster:children]
k8s_masters
k8s_workers


# ================================
# K3S CLUSTER
# ================================
[k3s_masters]
# K3s master node(s) - can have multiple for HA
# Example for Ubuntu/Debian
k3s-master1 ansible_host=192.168.2.10 ansible_user=ubuntu
# k3s-master2 ansible_host=192.168.2.11 ansible_user=ubuntu
# k3s-master3 ansible_host=192.168.2.12 ansible_user=ubuntu

# Example for RHEL/CentOS
# k3s-master1 ansible_host=192.168.2.10 ansible_user=ec2-user

[k3s_workers]
# K3s worker nodes
# Example for Ubuntu/Debian
k3s-worker1 ansible_host=192.168.2.20 ansible_user=ubuntu
k3s-worker2 ansible_host=192.168.2.21 ansible_user=ubuntu
k3s-worker3 ansible_host=192.168.2.22 ansible_user=ubuntu

# Example for RHEL/CentOS
# k3s-worker1 ansible_host=192.168.2.20 ansible_user=ec2-user
# k3s-worker2 ansible_host=192.168.2.21 ansible_user=ec2-user

# K3s cluster grouping
[k3s_cluster:children]
k3s_masters
k3s_workers


# ================================
# DOCKER HOSTS
# ================================
[docker_hosts]
# Docker installation targets
# Example for Ubuntu/Debian
docker-host1 ansible_host=192.168.3.10 ansible_user=ubuntu
docker-host2 ansible_host=192.168.3.11 ansible_user=ubuntu

# Example for RHEL/CentOS
# docker-host1 ansible_host=192.168.3.10 ansible_user=ec2-user
# docker-host2 ansible_host=192.168.3.11 ansible_user=ec2-user


# ================================
# GLOBAL VARIABLES
# ================================
[all:vars]
# Common variables for all hosts
ansible_ssh_private_key_file=~/.ssh/id_rsa
ansible_user=ubuntu
ansible_become=true
ansible_become_method=sudo

# SSH connection settings - More secure for production
# For testing/lab environments only, uncomment the next line:
# ansible_ssh_common_args='-o StrictHostKeyChecking=no'

# Python interpreter (adjust for your target systems)
ansible_python_interpreter=auto_silent

# Connection settings
ansible_ssh_pipelining=true
ansible_ssh_retries=3

# ================================
# K8s SPECIFIC VARIABLES
# ================================
[k8s_cluster:vars]
# Kubernetes specific variables
kubernetes_version=1.29
pod_network_cidr=10.244.0.0/16
service_network_cidr=10.96.0.0/12

# ================================
# K3S SPECIFIC VARIABLES
# ================================
[k3s_cluster:vars]
# K3s specific variables
# SECURITY: Use ansible-vault to encrypt sensitive values
# Run: ansible-vault encrypt_string 'your-secret-token' --name 'k3s_token'
k3s_token="{{ vault_k3s_token | default('CHANGE_ME_USE_VAULT') }}"
k3s_version=v1.29.1+k3s2
k3s_pod_network_cidr=10.42.0.0/16
k3s_service_network_cidr=10.43.0.0/16
k3s_cluster_domain=cluster.local

# ================================
# DOCKER SPECIFIC VARIABLES
# ================================
[docker_hosts:vars]
# Docker specific variables
docker_compose_install=true
docker_compose_version=2.24.5
docker_users=['ubuntu']  # Users to add to docker group
docker_daemon_options={
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m",
    "max-file": "3"
  },
  "storage-driver": "overlay2",
  "networks": {
    "bridge": {
      "ipam": {
        "config": [
          {
            "subnet": "10.69.0.0/16"
          }
        ]
      }
    }
  }
}